前情回顾

1. 查找操作
   find(query,field)
	 findOne(query,field)

2. query 操作符
		
		比较 ： $eq  $lt  $gt  $lte  $gte  $in  $nin
		逻辑 ： $and  $or   $not   $nor
		数组 ： $all   $size
		其他 ： $exists   $mod   $type

3. 数据处理函数
    pretty()  limit()  skip()  sort()  count()  distinct()

4. 修改操作
	 updateOne(query,update,upsert)
	 updateMany(query,update,upsert)
	 update()
	 findOneAndUpdate(query,update)
	 findOneAndReplace(query,doc)

5. 修改器使用
		$set    $unset   $rename

**********************************************************

一.修改器的使用（续）

	1. $inc ： 加法修改器
	  
		e.g. 将集合中所有文档age域加1
		db.class1.updateMany({},{$inc:{age:1}})

	2. $mul : 乘法修改器

	  e.g. 将集合中所有age值乘以0.5
		db.class1.updateMany({},{$mul:{age:0.5}})

  * $inc , $mul修改器的值可以是正数，负数，整数，小数

	
	3. $setOnInsert  当使用update*插入文档时，作为补充内容

		e.g.  当插入新文档是,gender:'m'也会插入
		db.class0.updateOne({name:'Bob'},{$set:{age:19},$setOnInsert:{'gender':'m'}},{upsert:true})

  4. $max : 指定某个域的值如果小于该值则修改为该值，大于则						不变

	  e.g. 如果Jame 年龄小于20改为20，大于20则不变
		db.class0.updateOne({name:'Jame'},{$max:{age:20}})

  5. $min : 指定某个域的值如果大于该值则修改为该值，小于则						不变

	
	6. 数组修改器

	  【1】 $push : 向数组中添加一项
		 
		  e.g. 向score数组中添加87
			db.class1.updateOne({name:'大旭'},{$push:{score:87}})
		
		【2】 $pushAll ： 向数组中添加多项
			
			e.g. 向score数组中同时添加多个元素
		   db.class1.updateOne({name:'波波'},{$pushAll:{score:[82,91]}})
		
		【3】 $pull : 从数组中删除一个值

		  e.g. 删除score中的85
			db.class1.updateOne({name:'大旭'},{$pull:{score:85}})

			e.g. 删除score数组中大于90的值
			db.class1.updateOne({name:'小超'},{$pull:{score:{$gt:90}}})


		【4】 $pullAll : 同时删除数组中多个值

		  e.g. 同时删除score数组中 86,87
			db.class1.updateOne({name:'小红'},{$pullAll:{score:[86,87]}})

    【5】 $pop : 弹出数组中一项

		  e.g. 弹出数组中第一项（1表示最后一项，-1表示第一项）
			db.class1.updateOne({name:'小铭'},{$pop:{score:-1}})

    【6】$addToSet: 向数组中添加一项，但是不能和已有值重复

		  e.g. 向score数组添加一项，但是不能与已有值重复
			db.class1.updateOne({name:'小红'},{$addToSet:{score:90}})
		
		【7】$each ： 对多个值逐一操作

		  e.g. 使用each添加86,79到数组
			db.class1.updateOne({name:'小红'},{$push:{score:{$each:[86,79]}}})
		
		【8】$position : 指定插入元组的位置 配合each使用 

		  e.g. 选择0号位置插入90
			db.class1.updateOne({name:'大旭'},{$push:{score:{$each:[90],$position:0}}})

    【9】$sort : 给数组排序 搭配each使用

		  e.g.  将score数组按照升序排序
			db.class1.updateOne({name:'蒙蒙'},{$push:{score:{$each:[],$sort:1}}})


练习： 使用之前的grade数据库
	1. 将小红的年龄修改为8岁，兴趣爱好变为跳舞画画
		updateOne({name:'小红'},{$set:{age:8,hobby:['dance','draw']}})

	2. 追加小明的兴趣爱好唱歌
		updateOne({name:'小明'},{$push:{hobby:'sing'}})

	3. 小王多了兴趣爱好吹牛，打篮球
		updateOne({name:'小王'},{$pushAll:{hobby:['吹牛','basketball']}})

	4. 小李兴趣要增加跑步，唱歌，但是不能和已有的一样
		updateOne({name:'小王'},{$addToSet:{hobby:{$each:['sing','running']}}})

	5. 班级所有同学年龄加1
	  updateMany({},{$inc:{age:1}})

	6. 删除小明sex属性
		updateOne({name:'小明'}，{$unset:{sex:''}})

	7. 小李的第一个兴趣爱好不要了
		updateOne({name:'小李'}，{$pop:{hobby:-1}})

	8. 删除小红兴趣中的画画唱歌
		updateOne({name:'小红'},{$pullAll:{hobby:['draw','sing']}})
		
二. 删除文档

  1. 格式对比
	  mysql ： delete from  table  where ...

		mongo :  db.collection.deleteOne(query)
  
	2. 删除函数使用

	  【1】 db.collection.deleteOne(query)
					功能：删除第一个符合条件文档
					参数：筛选条件，用法同find query

				e.g. 删除第一个性别为m的文档
				db.class0.deleteOne({gender:'m'})
		
		【2】 db.collection.deleteMany(query)
				  功能：同时删除所有符合条件的文档
					参数：筛选条件

				e.g. 删除所有不存在gender域的文档
				db.class0.deleteMany({gender:{$exists:false}})

    【3】 db.collection.remove(query,justOne)
					功能：删除文档
					参数：query 筛选条件
								justOne=false 功能同deleteMany
								justOne=true  功能同deleteOne
		
		【4】 db.collection.findOneAndDelete(query)
					功能：查找一个文档并删除之
					参数：query 筛选条件
					返回：显示查找到的文档

				e.g.  查找第一个年龄为19的文档并删除
				db.class0.findOneAndDelete({age:19})


三. 一些数据类型

  1. 时间类型

	  【1】 获取当前时间
				* new Date()  自动生成当前时间
	
					e.g.
					db.class2.insertOne({book:'Python入门',date:new Date()})

				* Date() 获取计算机时间生成字符串

				  e.g.
					db.class2.insertOne({book:'Python精通',date:Date()})
    
		【2】 时间函数 
				ISODate(date)
				功能：将定时间转换为mongodb存储时间
				参数：默认为当前ISO时间
							通过字符串指定之间
								 "2019-01-01 11:11:11"
								 "20190101 11:11:11"
								 "20190101"

					e.g. 生成指定的标准时间
					db.class2.insertOne({book:'Python放弃',date:ISODate("2019-01-01 11:11:11")})

		【3】 获取时间戳
		    
				valueOf()
				功能 ：根据标准时间生成时间戳

				e.g. 获取当前标准时间时间戳
				db.class2.insertOne({book:'Python涅磐',date:ISODate().valueOf()})


  2. Null类型
	  
		【1】值 ： null
		
		【2】含义：
		 
		  * 表示某个域的值为空

				e.g. 表示price域值为空
				db.class2.insertOne({book:'Python Web',price:null})
			
			* 在表达式语句中表示不存在

			  e.g. 查找price域值为null或者不存在price域的文档
				db.class2.find({price:null},{_id:0})

  3. Object类型
	   
		【1】 定义：文档中每个域的值为文档，则该文档称为object数据,即对象类型。

		【2】 使用方法：当使用内部文档某个域的值时，需要使用"外部域.内部域"的格式获取。此时该格式需要用引号标记为字符串。
		  
			e.g. 通过内部域title查找文档
			db.class3.find({'book.title':'茶馆'},{_id:0})

			e.g. 修改围城的价格为38
			db.class3.updateOne({'book.title':'围城'},{$set:{'book.price':38}})

			
  4. 数组下标直接引用方法

	  * 在使用数组时，可以直接通过"数组域.下标"的方法获取具体的某一项值

		  e.g. 将小超 score数组中第二项改为85
			db.class1.updateOne({name:'小超'},{$set:{'score.1':85}})


练习: 使用grade数据库完成
  1. 删除所有年龄小于8岁或者大于12岁的同学
		deleteMany({$or:[{age:{$lt:8}},{age:{$gt:12}}]})

	2. 给小红第二项爱好变为 跳舞
		updateOne({name:'小红'},{$set:{'hobby.1':'dance'}})

	3. 删除兴趣爱好中没有 画画的同学
		deleteMany({hobby:{$nin:['draw']}})

	4. 给小王增加一个域 ： 备注：{民族：'回族',习俗:'不吃猪肉'}
		updateOne({name:'小王'},{$set:{备注：{民族：'回族',习俗:'不吃猪肉'}}})

	5. 修改小王的备注域，增加一项  宗教:"伊斯兰教"
		updateOne({name:'小王'},{$set:{'备注.宗教':'伊斯兰教'}})


四. 索引操作

  1. 什么是索引：索引是建立文档所在位置的查找清单，使用索引可以方便快速查找，减少遍历次数，提高查找效率。

	2. 索引约束

	  【1】 索引本身也占据空间，所以当数据量很小时没必要创建索引消耗。

		【2】 索引表需要根据数据的修改及时变更，此时会降低数据增删改的效率。因此当数据库操作为大量的写操作而不是查找操作时不必创建索引。
	
	3.创建索引

	  【1】 db.collection.createIndex()
					功能： 创建索引
					参数： 索引域 和 索引选项

					e.g. 为name域创建一个索引
					db.class0.createIndex({name:1})

					* _id域会由系统自动创建索引，且不能删除
					* 1 表示正向索引，-1表示逆向索引
		
		【2】 db.collection.getIndexes()
					功能：查看一个集合中的索引

		【3】 自定义索引名称
				  
					 e.g. 通过第二个参数选项定义索引名称为Age
					 db.class0.createIndex({age:1},{name:"Age"})
    
		【4】 其他索引创建方法
					
					ensureIndex()
					功能：创建索引
					参数：同createIndex()

					createIndexes([{},{}])
					功能： 同时创建多个索引
					参数： 数组中存入多个索引键值对

					e.g. 同时创建多个索引
					 db.class0.createIndexes([{name:-1},{age:-1}])

  4. 删除索引

		【1】 db.collection.dropIndex()
					功能：删除一个索引
					参数：索引名称或者键值对

					e.g.
					db.class0.dropIndex('age_-1')

					e.g.
					db.class0.dropIndex({name:-1})
    
		【2】 db.collection.dropIndexes()
					功能：删除集合中所有索引 （不会删除_id索引）

					e.g. 删除class0中所有索引
							db.class0.dropIndexes()

  5. 其他类型索引

	  【1】 复合索引：根据多个域创建一个索引
		  
			e.g. 根据多个域创建一个索引，便于复合查询
			db.class0.createIndex({name:1,age:-1})
		
		【2】 子文档/数组索引：如果对某个域创建索引，该域的值为子文档或者数组，则对子文档或者数组中某一项查询也是索引查询

		  e.g. 如果对book域创建索引，则该查找也是索引查找
			 db.class3.find({'book.title':'狂人日记'},{_id:0})

		【3】 唯一索引 ： 要求创建索引的域不能有重复值

		  e.g. 对name域创建唯一索引
			db.class0.createIndex({name:1},{unique:true})

    【4】 稀疏索引：如果创建索引时某些文档不存在指定索引域则忽略这些文档

		  e.g. 对age域创建稀疏索引(适用于部分文档没有age域的情况)
			db.class0.createIndex({age:1},{sparse:true})


五. 聚合操作

  1. 什么是聚合：对文档进行数据整理和统计

	2. 聚合函数 
	   db.collection.aggregate()
		 功能： 完成聚合操作，获取操作数据
		 参数： 聚合条件，配合聚合操作符使用
	
	3. 聚合操作符

	  【1】 $group  分组聚合  需要配合一定的统计操作符

		   * 统计求和： $sum
			 
			 e.g. 按性别分组统计每组人数
			 db.class0.aggregate({$group:{_id:'$gender',num:{$sum:1}}})


			 * 求平均数：$avg

			 e.g. 按性别分组求平均年龄
			 db.class0.aggregate({$group:{_id:'$gender',Age:{$avg:'$age'}}})

       * 求最大/最小值：$max / $min

			 e.g. 按性别分组求每组最小年龄
			 db.class0.aggregate({$group:{_id:'$gender',num:{$min:'$age'}}})

			 * 求第一个/最后一个值： $first/$last

       e.g. 按性别分组求每组第一个值
			 db.class0.aggregate({$group:{_id:'$gender',num:{$first:'$age'}}})
    
		【2】 $project  用于获取指定域的集合文档数据
			 
				* $project 值得写法类似find函数的field参数
			
		   e.g. 获取集合中name，age域内容
			 db.class0.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})

作业： 1. 续银行系统 ： 完成修改和删除操作练习
			 2. 复习网络，进程线程使用
			 3. 巩固操作符和函数的使用



